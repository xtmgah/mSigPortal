ggvenn(x)
x <- matrix(sample(0:4, 40, TRUE, c(.5, .1, .1, .1, .1)), ncol=4)
colnames(x) <- LETTERS[1:4]
library(yyplot)
ggvenn(x)
x
mpg
iris
head(iris)
library(ggplot2)
iris %>% ggplot(aes(Sepal.Length,Sepal.Length))+geom_bin2d()
library(dplyr)
iris %>% ggplot(aes(Sepal.Length,Sepal.Length))+geom_bin2d()
p <- iris %>% ggplot(aes(Sepal.Length,Sepal.Length))+geom_bin2d()
set_font(p,family = "Roboto",fontface = "bold")
g1 <- set_font(p,family = "Roboto",fontface = "bold")
g1
print(g1)
g1
g1 <- set_font(p,family = "Roboto",fontface = "bold",col="red",size=6)
g1
library(cowplot)
plot_grid(p,g1)
g1
install.packages("htmlTable")
install.packages("class", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
tmp <- readRDS('~/Downloads/TCGA-ATAC_PanCan_Log2Norm_Counts.rds')
head(tmp'')
head(tmp)
str(tmp)
quit()
install.packages("valr", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("pheatmap", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("git2r")
install.packages("tibble", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("git2r")
ls()
ls()
quit()
install.packages(c("cowplot", "git2r", "htmlTable"))
install.packages(c("cowplot", "git2r", "htmlTable"))
install.packages(c("cowplot", "git2r", "htmlTable"))
install.packages(c("BH", "gclus", "rlang"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("checkmate", "showtext"))
install.packages(c("clipr", "curl", "dbplyr", "rstudioapi", "tinytex"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("checkmate", "data.table"))
install.packages(c("checkmate", "data.table"))
install.packages(c("colorspace", "tibble"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
setwd('/Volumes/data/lusc_lune/Clonality/dpclust/Sum/')
rm(list=ls())
library(tidyverse)
library(readxl)
library(scales)
library(hrbrthemes)
library(formattable)
library(pheatmap)
sub_query <- 'IGC-11-1128'
cluster_data_all_query <- cluster_data_all %>% dplyr::filter(subject==sub_query) %>% arrange(desc(no.of.mutations)) %>% mutate(len=no.of.mutations/7961)
file <- paste0('../test_fail/',subject,'/',sub_query,'_consensusClustersByParallelNodeAssignment_16Oct2014.txt')
cluster_data <- read_delim(file,delim = '\t',col_names = T)
load('clone_cluster_data.RData')
sub_query <- 'IGC-11-1128'
cluster_data_all_query <- cluster_data_all %>% dplyr::filter(subject==sub_query) %>% arrange(desc(no.of.mutations)) %>% mutate(len=no.of.mutations/7961)
file <- paste0('../test_fail/',subject,'/',sub_query,'_consensusClustersByParallelNodeAssignment_16Oct2014.txt')
cluster_data <- read_delim(file,delim = '\t',col_names = T)
cluster_data <- cluster_data %>% select(cluster.no, contains("IGC")) %>% gather(Sample,CCF,-cluster.no) %>% separate(Sample,into=c('Region','Type'),sep = '_') %>% group_by(cluster.no,Region) %>% summarise(CCF=mean(CCF)) %>% ungroup() %>% mutate(Region=str_remove(Region,sub_query)) %>% filter(cluster.no %in% cluster_data_all_query$cluster.no) %>% spread(Region,CCF)
order_cluster <- cluster_data %>% gather(sample,ccf,-cluster.no) %>% group_by(cluster.no) %>% summarise(ccf=mean(ccf)) %>% arrange(desc(ccf)) %>% pull(cluster.no)
getwd()
file <- paste0('../test_fail/',subject,'/',sub_query,'_consensusClustersByParallelNodeAssignment_16Oct2014.txt')
cluster_data <- read_delim(file,delim = '\t',col_names = T)
file.exists(file)
sub_query <- 'IGC-11-1128'
file <- paste0('../test_fail/',subject,'/',sub_query,'_consensusClustersByParallelNodeAssignment_16Oct2014.txt')
cluster_data <- read_delim(file,delim = '\t',col_names = T)
cluster_data <- cluster_data %>% select(cluster.no, contains("IGC")) %>% gather(Sample,CCF,-cluster.no) %>% separate(Sample,into=c('Region','Type'),sep = '_') %>% group_by(cluster.no,Region) %>% summarise(CCF=mean(CCF)) %>% ungroup() %>% mutate(Region=str_remove(Region,sub_query)) %>% filter(cluster.no %in% cluster_data_all_query$cluster.no) %>% spread(Region,CCF)
order_cluster <- cluster_data %>% gather(sample,ccf,-cluster.no) %>% group_by(cluster.no) %>% summarise(ccf=mean(ccf)) %>% arrange(desc(ccf)) %>% pull(cluster.no)
file <- paste0('../test_fail/',sub_query,'/',sub_query,'_consensusClustersByParallelNodeAssignment_16Oct2014.txt')
cluster_data <- read_delim(file,delim = '\t',col_names = T)
cluster_data <- cluster_data %>% select(cluster.no, contains("IGC")) %>% gather(Sample,CCF,-cluster.no) %>% separate(Sample,into=c('Region','Type'),sep = '_') %>% group_by(cluster.no,Region) %>% summarise(CCF=mean(CCF)) %>% ungroup() %>% mutate(Region=str_remove(Region,sub_query)) %>% filter(cluster.no %in% cluster_data_all_query$cluster.no) %>% spread(Region,CCF)
order_cluster <- cluster_data %>% gather(sample,ccf,-cluster.no) %>% group_by(cluster.no) %>% summarise(ccf=mean(ccf)) %>% arrange(desc(ccf)) %>% pull(cluster.no)
mcluster_data <- as.matrix(cluster_data[,-1])
rownames(mcluster_data) <- cluster_data$cluster.no
mcluster_data <- mcluster_data[as.character(order_cluster),]
pheatmap(mcluster_data,scale = "none",color = rev(viridis_pal()(100)),fontsize = 16,cluster_rows=F)
row_order <- rev(c('T03','T07','T04','T08','T06','T05','T02','T01'))
mcluster_data <- mcluster_data[,row_order]
pheatmap(mcluster_data,scale = "none",color = rev(viridis_pal()(100)),fontsize = 16,cluster_rows=F,cluster_cols = F)
cluster_data %>% mutate(cluster.no=factor(cluster.no,levels = order_cluster)) %>% arrange(cluster.no)%>% select(cluster.no,row_order) %>% formattable(list(area(col = c(T01,T02,T03,T04,T05,T06,T07,T08)) ~ color_bar("#FA614B")))
cluster_data_all_query
pheatmap(mcluster_data,scale = "none",color = rev(viridis_pal()(100)),fontsize = 16,cluster_rows=F,cluster_cols = F)
cluster_data_all_query %>% mutate(len=200*len/0.338)
cluster_data_all_query %>% mutate(len=300*len/0.338)
library(revolver)
data("Breast.fit") # Yates et al.
Breast.fit
setwd('~/Terminal/tmp/')
revolver_report_patient(Breast.fit, 'PD9770', cex = 1.5)
o()
revolver_report_fit_patient(Breast.fit, 'PD9770', cex = 3)
o()
revolver_plt_patient_data(Breast.fit, patient = 'PD14753')
o()
rm(list = ls())
library(survival)
library(survey)
setwd()
set_wd()
library(devtools)
/install_github
?system
load('~/NIH-Work/R/annotable_ens90.RData')
libztw()
ls()
grch37_gt
grch37
grch37 %>% count(biotype)
grch37 %>% count(biotype) %>% View()
libztw()
seset_last_plot()
sessionInfo()
libztw()
devtools::install_github("stemangiola/tidyHeatmap")
install_github("stemangiola/ARMET", args = "--preclean", build_vignettes = FALSE)
library(devtools)
install_github("stemangiola/ARMET", args = "--preclean", build_vignettes = FALSE)
install.packages("tidybayes")
install_github("stemangiola/ARMET", args = "--preclean", build_vignettes = FALSE)
install.packages("rstantools")
install_github("stemangiola/ARMET", build_vignettes = FALSE)
install.packages(c("boot", "class", "KernSmooth", "later", "lattice", "MASS", "nlme", "nnet", "spatial", "SQUAREM", "survival"))
library(GGally)
install.packages("GGally")
library(GGally)
library(network)
install.packages("network")
library(sna)
install.packages("sna")
library(GGally)
library(network)
library(sna)
library(ggplot2)
net = rgraph(10, mode = "graph", tprob = 0.5)
net = network(net, directed = FALSE)
netw
net
net = rgraph(10, mode = "graph", tprob = 0.5)
net
net = network(net, directed = FALSE)
net = rgraph(5, mode = "graph", tprob = 0.5)
net = network(net, directed = FALSE)
ggnet2(net)
ggnet2(net, node.size = 6, node.color = "black", edge.size = 1, edge.color = "grey")
ggnet2
ggnet2(net, node.size = c(1:5), node.color = "black", edge.size = 1, edge.color = "grey")
ggnet2(net, node.size = c(1:5), node.color = "black", edge.size = 6:1, edge.color = "grey")
ggnet2(net, node.size = c(1:5), node.color = "black", edge.size = 4:1, edge.color = "grey")
ggnet2(net, size = 6, color = "black", edge.size = 1, edge.color = "grey")
ggnet2(net, size = 6, color = rep(c("tomato", "steelblue"), 5))
ggnet2(net, size = 6, color = rep(c("tomato", "steelblue","blue","red","green"))
ggnet2(net, size = 6, color = c("tomato", "steelblue","blue","red","green"))
ggnet2(net, node.size = c(1:5), node.color = "black", edge.size = 4:1, edge.color = "grey")
ggnet2(net, size = 6, color = "black", edge.size = 1, edge.color = "grey")
ggnet2(net, size = 6, color = c("tomato", "steelblue","blue","red","green"))
ggnet2(net, mode = "circle")
ggnet2(net, mode = "kamadakawai")
net %v% "phono"
net %v% "phono" = ifelse(letters[1:10] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net, color = "phono")
net %v% "color" = ifelse(net %v% "phono" == "vowel", "steelblue", "tomato")
ggnet2(net, color = "color")
net %v% "phono"
bip = data.frame(event1 = c(1, 2, 1, 0),
event2 = c(0, 0, 3, 0),
event3 = c(1, 1, 0, 4),
row.names = letters[1:4])
bip
ggnet2
?ggnet2
ggnet2(net, mode = "fruchtermanreingold", layout.par = list(cell.jitter = 0.75))
ggnet2(net, mode = "target", layout.par = list(niter = 100))
ggnet2(net, mode = "kamadakawai")
ggnet2(net, mode = "adj")
net = rgraph(10, mode = "graph", tprob = 0.5)
ggnet2(net, mode = "adj")
net = rgraph(10, mode = "graph", tprob = 0.5)
net = rgraph(6, mode = "graph", tprob = 0.5)
ggnet2(net, mode = "adj")
net = rgraph(5, mode = "graph", tprob = 0.5)
ggnet2(net, mode = "adj")
net
net = rgraph(5, mode = "graph", tprob = 0.5)
net
ggnet2(net, mode = "adj")
ggnet2(net, mode = "eigen")
net = rgraph(3, mode = "graph", tprob = 0.5)
net
ggnet2(net, mode = "adj")
net = rgraph(4, mode = "graph", tprob = 0.5)
net
ggnet2(net, mode = "adj")
ggnet2(net, mode = "sego")
ggnet2(net, mode = "segeo")
ggnet2(net, mode = "target")
bip = data.frame(event1 = c(1, 2, 1, 0),
event2 = c(0, 0, 3, 0),
event3 = c(1, 1, 0, 4),
row.names = letters[1:4])
bip
bip = network(bip,
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
ggnet2(bip, label = TRUE)
ggnet2(bip, label = TRUE,mode = 'adj')
install.packages(c("GetoptLong", "GlobalOptions", "gmp", "mvtnorm", "promises", "RcppArmadillo", "StanHeaders", "systemfonts"))
install.packages(c("circlize", "ggfittext", "sf", "survival", "units"))
devtools::install_github("caravagn/revolver")
install.packages("rmarkdown")
install.packages(c("ggplot2", "isoband", "rstatix", "tidybayes", "tinytex", "V8"))
install.packages(c("DT", "ggforce", "gower", "htmlTable", "inspectdf", "jsonlite", "knitr", "magick", "patchwork", "RcppParallel", "recipes", "shiny", "tidyHeatmap", "xfun"))
install.packages("fs")
install.packages(c("GetoptLong", "gplots", "htmlTable", "nloptr", "processx", "Rcpp", "rJava", "skimr", "tidylog"))
install.packages(c("broom", "Cairo", "quantreg", "rJava", "rstan"))
?missing
install.packages(c("compositions", "DescTools", "ggalluvial", "ggdist", "pillar", "pkgbuild", "rlang", "rstan", "sf", "tibble"))
libztw()
pdfhr()
pdfhr
install.packages(c("bit64", "configr", "expm", "ggasym", "httr", "loo", "RcppArmadillo", "remotes", "rstan", "sf", "vctrs"))
install.packages("devtools")
install.packages("sys")
install.packages(c("data.table", "tinytex", "xfun"))
rm(list=ls())
set_wd()
libztw()
load('sherlock_survival.RData')
suvdata_tmp <- suvdata %>% filter(!is.na(death),!is.na(survival_months),!is.na(age),!is.na(gender), !is.na(stage))
#data_all_tmp <- data_all %>% filter(Key %in% c("MDM2|SCNA_Focal","TP53|Mutation_Driver","ERBB2|Mutation_Driver","MET|Mutation_Driver","ALK|Fusion","KRAS|Mutation_Driver","EGFR|Mutation_Driver","CHEK2|HRD_LOH","ATM|HRD_LOH","HLA_LOH|@","Chr22q|SCNA_Arm","Chr15q|SCNA_Arm", "SETD2|Mutation_Driver"))
data_all_tmp <- data_all %>% filter(!(Key %in% c("HRD|HRD_LOH","p53_deficiency|@" ,"RTK-RAS+|@","Histology|@","Quiet Tumor|@")))
tmpkey <- data_all_tmp %>% select(Subject,Key) %>% unique() %>% count(Key) %>% arrange(n) %>% filter(n>(0.03*232)) %>% pull(Key)
data_all_tmp <- data_all_tmp %>% filter(Key %in% tmpkey) %>% unique()
tmp <- data_all_tmp %>% filter(Tumor_Barcode %in% suvdata_tmp$Tumor_Barcode) %>%
select(Tumor_Barcode,Key) %>% mutate(Value=1) %>%
unique()
tmpdata <- suvdata_tmp %>% select(Tumor_Barcode,age,gender,stage) %>%
mutate(gender=if_else(gender=="Female",1L,0L)) %>%
mutate(stage=as.integer(stage)) %>%
left_join(tmp) %>% unique() %>%
pivot_wider(names_from = Key,values_from=Value,values_fill=0) %>% select(-`NA`)
suvdata_tmp$Tumor_Barcode==tmpdata$Tumor_Barcode
patient.data <- NULL
patient.data <- list(x=as.matrix(tmpdata[,-1]),time= suvdata_tmp$survival_months, status=suvdata_tmp$death)
dataname <- colnames(tmpdata)[-1]
library("glmnet")
library("survival")
cv.fit <- cv.glmnet(patient.data$x, Surv(patient.data$time, patient.data$status), family="cox", maxit = 50000)
fit <- glmnet(patient.data$x, Surv(patient.data$time,patient.data$status), family =  "cox", maxit = 50000)
plot(cv.fit)
cv.fit$lambda.min
Coefficients <- coef(fit, s = cv.fit$lambda.min)
Active.Index <- which(Coefficients != 0)
Active.Coefficients  <- Coefficients[Active.Index]
Active.Index
betavalue <-Active.Coefficients
names(betavalue) <- dataname[Active.Index]
betavalue
install.packages(c("bit", "bit64", "dplyr", "fs", "tidyr"))
devtools::install_github("stemangiola/tidyHeatmap")
mtcars_tidy =
mtcars %>%
as_tibble(rownames="Car name") %>%
# Scale
mutate_at(vars(-`Car name`, -hp, -vs), scale) %>%
# tidyfy
gather(Property, Value, -`Car name`, -hp, -vs)
mtcars_tidy
library(tidyHeatmap)
mtcars
mtcars %>%
as_tibble(rownames="Car name")
libztw()
mtcars %>%
as_tibble(rownames="Car name")
mtcars %>%
as_tibble()
mtcars %>%
as_tibble(rownames="Car name")
mtcars %>%
as_tibble(rownames="Car name") %>% mutate_at(vars(-`Car name`, -hp, -vs), scale)
mtcars %>%
as_tibble(rownames="Car name") %>% mutate_at(vars(-`Car name`, -hp, -vs), scale) %>% gather(Property, Value, -`Car name`, -hp, -vs)
mtcars %>%
as_tibble(rownames="Car name") %>% mutate_at(vars(-`Car name`, -hp, -vs), scale) %>% gather(Property, Value, -`Car name`, -hp, -vs)
mtcars_tidy <- mtcars %>%
as_tibble(rownames="Car name") %>% mutate_at(vars(-`Car name`, -hp, -vs), scale) %>% gather(Property, Value, -`Car name`, -hp, -vs)
mtcars_tidy
mtcars_tidy %>%
heatmap(
`Car name`,
Property,
Value,
annotation = hp
)
mtcars_tidy %>%
group_by(vs) %>%
heatmap(
`Car name`,
Property,
Value,
annotation = hp
)
mtcars_tidy %>%
heatmap(
`Car name`,
Property,
Value,
palette_value = c("red", "white", "blue")
)
mtcars_tidy %>%
heatmap(
`Car name`,
Property,
Value,
palette_value = circlize::colorRamp2(c(-2, -1, 0, 1, 2), viridis::magma(5))
)
pasilla
tidyHeatmap::pasilla %>%
group_by(location, type) %>%
heatmap(
.column = sample,
.row = symbol,
.value = `count normalised adjusted`,
annotation = c(condition, activation)
)
# Chreate some more data points
pasilla_plus =
tidyHeatmap::pasilla %>%
dplyr::mutate(act = activation) %>%
tidyr::nest(data = -sample) %>%
dplyr::mutate(size = rnorm(n(), 4,0.5)) %>%
dplyr::mutate(age = runif(n(), 50, 200)) %>%
tidyr::unnest(data)
pasilla_plus
pasilla_plus %>%
tidyHeatmap::heatmap(
.column = sample,
.row = symbol,
.value = `count normalised adjusted`,
annotation = c(condition, activation, act, size, age),
type = c("tile", "point", "tile", "bar", "line")
)
install.packages('modelsummary')
library(modelsummary)
mod <- lm(y ~ x, dat)
msummary(mod)
dat
library(modelsummary)
url <- 'https://vincentarelbundock.github.io/Rdatasets/csv/HistData/Guerry.csv'
dat <- read.csv(url)
mod <- lm(Donations ~ Crime_prop, data = dat)
msummary(mod)
models <- list()
models[['OLS 1']] <- lm(Donations ~ Literacy + Clergy, data = dat)
models[['Poisson 1']] <- glm(Donations ~ Literacy + Commerce, family = poisson, data = dat)
models[['OLS 2']] <- lm(Crime_pers ~ Literacy + Clergy, data = dat)
models[['Poisson 2']] <- glm(Crime_pers ~ Literacy + Commerce, family = poisson, data = dat)
models[['OLS 3']] <- lm(Crime_prop ~ Literacy + Clergy, data = dat)
msummary(models)
mod <- lm(Donations ~ Crime_prop, data = dat)
msummary(mod)
tidy(mod)
msummary(mod,statistic = "p.value")
msummary(models, output = 'flextable')
install.packages("flextable")
msummary(models, output = 'flextable')
library(modelsummary)
library(tidyverse)
url <- 'https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv'
penguins <- read.csv(url)
datasummary_skim(penguins, histogram = TRUE)
datasummary_skim(penguins, 'categorical')
library(skimr)
library(inspectdf)
inspect_cat(penguins)
datasummary_correlation(mtcars)
ggplot(mpg, aes(displ)) +
geom_histogram()
ggplot(mpg, aes(displ)) +
geom_histogram(aes(y = after_stat(density)))
ggplot(mpg, aes(displ)) +
geom_histogram()
ggplot(mpg, aes(displ)) +
geom_histogram(aes(y = after_stat(density)))
ggplot(mpg, aes(class, hwy)) +
geom_boxplot(aes(colour = class, fill = after_scale(alpha(colour, 0.4))))
ggplot(mpg, aes(class, hwy)) +
geom_boxplot(aes(colour = class, fill = after_scale(alpha(colour, 0.1))))
ggplot(mpg, aes(class, hwy)) +
geom_boxplot(aes(colour = class, fill = after_scale(alpha(colour, 1))))
ggplot(mpg, aes(class, hwy)) +
geom_boxplot(aes(colour = class, fill = after_scale(alpha(colour, 0.1))))
ggplot(mpg, aes(class, hwy)) +
geom_boxplot(aes(colour = class, fill = after_scale(alpha(colour, 0.01))))
ggplot(mpg, aes(class, hwy)) +
geom_boxplot(aes(colour = class, fill = after_scale(alpha(colour, 0.01))))
ggplot(mpg, aes(class, hwy)) +
geom_boxplot(aes(colour = class, fill = after_scale(alpha(colour, 0.1))))
ggplot(diamonds, aes(carat)) +
geom_density(fill = "grey")
ggplot(diamonds, aes(carat)) +
geom_density()
ggplot(diamonds, aes(carat)) +
geom_density(fill = "grey")
shiny::runApp('~/NIH-Work/R/Rshinyapp/MPRA3')
runApp('~/NIH-Work/R/Rshinyapp/MPRA2')
install.packages(c("cpp11", "ps"))
x <- haven::labelled(sample(5), c("bad" = 1, "good" = 5), "scores")
x
set_wd()
library(tidyverse)
library(cowplot)
library(hrbrthemes)
library(ggsci)
library(ggrepel)
library(factoextra)
# source msigportal function ----------------------------------------------
source('Sigvisualfunc.R')
# load reference signatures files -----------------------------------------
load('signature_refsets.RData')
### Cosine Similarity tab ###
# section 1: Cosine similarity within samples #
# two parameters need: Profile Type and Matrix Size #
profiletype <- "SBS"
matrixsize <- "SBS-96"
matrixsize <- str_remove(matrixsize,"-")
# data input can be filed use profiletype and matrixsize from the summary file jian generated.
data_input <- read_delim(paste0('example_results/output/',profiletype,'/22520169-fe27-4549-ad3e-e78d1812c45e.',matrixsize,'.all'),delim = '\t')
## remove the false data from the result. Don't know why the web generated two additional columns: False and seen, i think you trying to find the bug and remove.
data_input <- data_input %>% select(-False,-seen)
# Heatmap of cosine similarity within samples  and put on the web---------------------------
cos_sim_res1=cos_sim_df(data_input,data_input)
plot_cosine_heatmap_df(cos_sim_res1,cluster_rows = TRUE,plot_values = FALSE,output_plot = 'tmp.svg')
# a link to download the cosine similarity bellow the plot
# you could rename the file name if you need
cos_sim_res1 %>% write_delim('cos_sim_res1.txt',delim = '\t',col_names = T)
# section 2: Cosine similarity  to reference signatures #
# Two parameters need: Profile Type, Reference Signature Set
# Profile Type only support SBS, DBS, ID
profiletype <- "SBS"
profilename <- if_else(profiletype == "SBS","SBS96",if_else(profiletype=="DBS","DBS78",if_else(profiletype=="ID","ID83",NA_character_)))
#all the option of Reference Signature Set
signature_refsets %>% filter(Profile==profilename) %>% pull(Signature_set_name) %>% unique() ## put on the dropdown list
# if selected "COSMIC v3 Signatures (SBS)"
signaturesetname <- "COSMIC v3 Signatures (SBS)"
signature_refsets_input <- signature_refsets %>% filter(Profile==profilename,Signature_set_name==signaturesetname)
sigref <- signature_refsets_input %>%
select(Signature_name,MutationType,Contribution) %>%
pivot_wider(names_from = Signature_name,values_from=Contribution)
matrixsize <- profilename
# load SBS-96/DBS-78/ID-83 catalog files generated from previous result according to the profilename -----------
data_input <- read_delim(paste0('example_results/output/',profiletype,'/22520169-fe27-4549-ad3e-e78d1812c45e.',matrixsize,'.all'),delim = '\t')
## remove the false data from the result. Don't know why the web generated two additional columns: False and seen, i think you trying to find the bug and remove.
data_input <- data_input %>% select(-False,-seen)
# Heatmap of cosine similarity to reference set signature and put on the web---------------------------
cos_sim_res2=cos_sim_df(data_input,sigref)
plot_cosine_heatmap_df(cos_sim_res2,cluster_rows = TRUE,plot_values = FALSE,output_plot = 'tmp.svg')
# a link to download the cosine similarity bellow the plot
# you could rename the file name if you need
cos_sim_res2 %>% write_delim('cos_sim_res2.txt',delim = '\t',col_names = T)
### Profile Comparison tab ###
# section 1: Cosine similarity within samples #
# three parameters need: Profile Type, Sample Name1 and Sample Name2 #
profiletype <- "SBS"
sample_name1 <-  "SB749362"
sample_name2 <-  "SC420396"
matrixsize <- if_else(profiletype == "SBS","SBS96",if_else(profiletype=="DBS","DBS78",if_else(profiletype=="ID","ID83",NA_character_)))
data_input <- read_delim(paste0('example_results/output/',profiletype,'/22520169-fe27-4549-ad3e-e78d1812c45e.',matrixsize,'.all'),delim = '\t')
## remove the false data from the result. Don't know why the web generated two additional columns: False and seen, i think you trying to find the bug and remove.
data_input <- data_input %>% select(-False,-seen)
profile1 <- data_input %>% select(MutationType,contains(sample_name1))
profile2 <- data_input %>% select(MutationType,contains(sample_name2))
# put the plot on the web
plot_compare_profiles_diff(profile1,profile2,condensed = FALSE,output_plot = 'tmp.svg')
# section 2: Comparison to reference signatures #
# four parameters need: “Profile Type”, “Sample Name”, “Reference Signature Set” and “Compare Single Signature or Combined Signatures” #
sample_name <-  "SC420396"
profiletype <- "ID"
profilename <- if_else(profiletype == "SBS","SBS96",if_else(profiletype=="DBS","DBS78",if_else(profiletype=="ID","ID83",NA_character_)))
matrixsize <- profilename
data_input <- read_delim(paste0('example_results/output/',profiletype,'/22520169-fe27-4549-ad3e-e78d1812c45e.',matrixsize,'.all'),delim = '\t')
profile1 <- data_input %>% select(MutationType,one_of(sample_name))
#all the option of Reference Signature Set
signature_refsets %>% filter(Profile==profilename) %>% pull(Signature_set_name) %>% unique() ## put on the dropdown list
# if selected "COSMIC v3 Signatures (SBS)"
signaturesetname <- "COSMIC v3 Signatures (ID)"
signature_refsets_input <- signature_refsets %>% filter(Profile==profilename,Signature_set_name==signaturesetname)
sigref <- signature_refsets_input %>%
select(Signature_name,MutationType,Contribution) %>%
pivot_wider(names_from = Signature_name,values_from=Contribution)
user_input <- "ID1" #user_input <- "0.8*SBS5;0.1*SBS1;0.1*SBS3"
if(str_detect(user_input,";")){
profile2 <- signature_sum_operation(sigdatabase = signature_refsets_input,sigsetname = signaturesetname,formulax = user_input,outsigname = "Reconstructed")
profile_names = c("Original","Reconstructed")
}else {
profile2 <- sigref %>% select(MutationType,one_of(user_input))
profile_names = c(colnames(profile1)[2],colnames(profile2)[2])
}
sigref
profile2
colnames(sigref)
colnames(sigref)[-1]
sq
